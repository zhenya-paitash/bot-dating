const asyncHandler = require('express-async-handler')
const User = require('../models/userModel')
const UserStatistic = require('../models/userStatisticModel')
const Link = require('../models/linkModel')
const Review = require('../models/reviewModel')
const Ban = require('../models/banModel')
const { findPartners, getTargets } = require('./utils/user')

// @desc      Get all users
// @route     GET /api/user
// @access    Private
const getUsers = asyncHandler(async (req, res) => {
  const users = await User.find({})
  res.status(200).json({
    message: `–í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòê`,
    data: users,
  })
})

// @desc      Get user by id
// @route     GET /api/user/:id
// @access    Private
const getUsersById = asyncHandler(async (req, res) => {
  const user = await User.findOne({ id: req.params.id })
  if (!user) {
    res.status(404)
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå')
  }

  // ? —É–¥–∞–ª–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  if (user.vip && user.vip.status) {
    const { to } = user.vip
    const timeIsUp = new Date(to).getTime() - new Date().getTime() < 0

    if (timeIsUp) {
      console.log('NEED DELETE')
      user.vip = {}
      await user.save()
    }
  }

  res.status(200).json({
    message: `–ü–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚úîÔ∏è`,
    data: user,
  })
})

// @desc      Get list potential partners
// @route     GET /api/user/:id/search
// @access    Private
const getPotentialPartnerUsers = asyncHandler(async (req, res) => {
  let user = await User.findOne({ id: req.params.id })

  if (!user) {
    res.status(404)
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå')
  }

  if (!user.target && user.targets.length) {
    const [target, targets] = getTargets(user.targets)
    user.target = target
    user.targets = targets
    await user.save()

    const data = await User.findOne({ id: target })
    // ? –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID –∏–∑ —Å—Ç–µ–∫–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω
    if (!data) {
      user.target = ''
      await user.save()
      res.status(404)
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å—Ç—ç–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã–ª —É–¥–∞–ª–µ–Ω ‚ùì')
    }

    return res.status(200).json({
      message: '–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –≤–∞—à–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ ü§©',
      data,
    })
  }

  const users = await findPartners(user)

  if (users.length) {
    const [target, targets] = getTargets(users)
    const data = await User.findOne({ id: target })
    if (!data) {
      user.target = ''
      await user.save()

      res.status(404)
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å—Ç—ç–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã–ª —É–¥–∞–ª–µ–Ω ‚ùì')
    }

    user.target = target
    user.targets = targets
    await user.save()

    return res.status(200).json({
      message: '–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –≤–∞—à–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ ü§©',
      data,
    })
  }

  res.status(200).json({
    message: '–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üò•',
    data: null,
  })
})

// @desc      Add new user to database
// @route     POST /api/user
// @access    Private
const createUser = asyncHandler(async (req, res) => {
  const { id, firstname, username } = req.body
  const userExists = await User.findOne({ id })
  if (userExists) {
    res.status(400)
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ üòÑ')
  }

  const isBanned = await Ban.findOne({ telegramid: id })
  if (isBanned) {
    res.status(400)
    throw new Error('–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω ü•∂')
  }

  const user = await User.create({ id, firstname, username })
  const userStat = await UserStatistic.findOne({ tgid: id })
  if (!userStat) {
    await UserStatistic.create({ tgid: id })
  }

  res.status(201).json({
    message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É üòÉ`,
    data: user,
  })
})

// @desc      Update user info
// @route     PUT /api/user/:id
// @access    Private
const updateUser = asyncHandler(async (req, res) => {
  const updUser = await User.findOneAndUpdate({ id: req.params.id }, req.body)
  if (!updUser) {
    res.status(400)
    throw new Error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
  }

  res.status(201).json({
    message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updUser.id} –æ–±–Ω–æ–≤–ª–µ–Ω ‚úîÔ∏è`,
    data: updUser,
  })
})

// @desc      Delete user
// @route     DELETE /api/user/:id
// @access    Private
const deleteUser = asyncHandler(async (req, res) => {
  const user = await User.findOne({ id: req.params.id })
  if (!user) {
    res.status(404)
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ üòÑ')
  }

  await Link.deleteMany({ $or: [{ uid: user._id }, { targetid: user._id }] })
  await UserStatistic.findOneAndUpdate(
    { tgid: user.id },
    { $inc: { deletedAccount: 1 } }
  )
  await user.remove()

  res.status(200).json({
    message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.params.id} –±—ã–ª —É–¥–∞–ª–µ–Ω! ‚ùå`,
    data: {},
  })
})

// @desc      Ban user by telegram id
// @route     POST /api/user/ban/:id
// @access    Private
const banUser = asyncHandler(async (req, res) => {
  try {
    const user = await User.findOne({ id: req.params.id })
    if (user) {
      await Link.deleteMany({
        $or: [{ uid: user._id }, { targetid: user._id }],
      })
      await Review.deleteMany({ user: user._id })
      await user.remove()
    }

    await Ban.create({ telegramid: req.params.id })

    res.status(200).json({
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.params.id} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–Ω-–ª–∏—Å—Ç. üî¥`,
      data: {},
    })
  } catch (e) {
    res.status(404)
    throw new Error(e)
  }
})

// @desc      Unban user by telegram id
// @route     POST /api/user/unban/:id
// @access    Private
const unbanUser = asyncHandler(async (req, res) => {
  await Ban.deleteOne({ telegramid: req.params.id })

  res.status(201).json({
    message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.params.id} —Ç–µ–ø–µ—Ä—å —Ä–∞–∑–±–∞–Ω–µ–Ω`,
    data: {},
  })
})

module.exports = {
  getUsers,
  getUsersById,
  getPotentialPartnerUsers,
  createUser,
  updateUser,
  deleteUser,
  banUser,
  unbanUser,
}
